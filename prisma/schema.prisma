// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //Local database
  provider = "postgresql"

  // Prod
  // provider = "cockroachdb"
  url = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  displayName String?
  bio        String?
  phone      String?
  username   String?
  usn        String?
  lightTheme String?
  darkTheme  String?
  links      String[]
  achivements String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Core      Core[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Core {
  id       String @id @default(cuid())
  year     String
  position String
  User     User   @relation(fields: [userId], references: [id])

  userId String
}

model Faculty {
  id String @id @default(cuid())

  name        String
  email       String
  designation String
  image       String
  about       String[]

  order     Int     @unique
  published Boolean @default(false)

  @@index([name], name: "name_index")
}